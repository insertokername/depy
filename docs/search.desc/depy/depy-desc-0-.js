searchState.loadedDescShard("depy", 0, "Depy is a program that interacts with the <code>scoop</code> package …\nRepresents scoop packages as structs\nReading / Modifing json files\nShell commands\nStruct representation of a generic scoop package\nLens for the corresponding field.\nLens for the corresponding field.\nContains the PackageError enum\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRecieves a serde_json::Value and parses it into a single …\nLens for the corresponding field.\nDerived lenses for <code>Package</code>.\nSaves a list of packages to ./depy.json\nRecieves a serde_json::Value and parses it into a single …\nLens for the corresponding field.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLens for the field <code>bucket_name</code> on <code>Package</code>.\nLens for the field <code>bucket_url</code> on <code>Package</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLens for the field <code>name</code> on <code>Package</code>.\nCreates a new lens for the field <code>bucket_url</code> on <code>Package</code>. …\nCreates a new lens for the field <code>bucket_name</code> on <code>Package</code>. …\nCreates a new lens for the field <code>name</code> on <code>Package</code>. Use …\nCreates a new lens for the field <code>version</code> on <code>Package</code>. Use …\nLens for the field <code>version</code> on <code>Package</code>.\nStruct version of the env_set field in a scoop manifest\nStruct version of a manifest.json stripped down to only …\nContains the ParseError enum\nReturns the argument unchanged.\nReturns the argument unchanged.\nTransforms a str of a json into a serde_json::Value and …\nTransforms a serde val into a vec of environment variables\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJson reading and transforming it to Manifest\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nExpands variables that are needed in <code>env_set</code> and …\nReturns all env_add_path attributes from a manifest in the …\nReturns all env_set attributes from a manifest in the form …\nReturns the version of a manifest\nGets the current system arch and returns it in a format …\nChecks all bins in a manifest for a certain query\nParses a json file from a path and returns the contents as …\nBucket related shell operations\nCleanup / Deletion related shell operations\nDirectory reading/modifing related shell operations\nContains the ShellError enum\nInstallation related shell operations\nruns generic command inside the depy/scoop folder\nVirtual environment related shell operations\nAdds a bucket to the depy/scoop instalation\nDeletes all buckets installed in the depy/scoop instalation\nReturns Vec&lt;(name, url)&gt;\nReturns the url of a bucket in a githubusercontent raw form\nFinds a package matching the query in any buckets in the …\nRemove a bucket to the depy/scoop instalation\nPurges each package that is installed in the depy/scoop …\nCleans up any residual values in the depy path\nCleans all shims installed in the depy/scoop/shims folder\nFirst calls <code>clean_depy_packages</code> and then deletes the depy …\nDeletes everything inside a directory\nReturns the location of the depy installation  directory\nReturns the location of the main scoop installation …\nReturns the location of a specific version of an app\nCreates all directories necessary for depy to function …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUpdates scoop and creates depy directory if doesn’t …\nInstalls a list of packages\nInstalls a program in the depy dir without adding it to …\nCreates the .depyenv folder in curent folder, containing …")